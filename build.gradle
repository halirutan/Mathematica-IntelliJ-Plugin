buildscript {
    ext.kotlin_version = '1.1.61'

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
        maven {
            url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2'
        }
    }

    dependencies {
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.3.0-SNAPSHOT"
    }
}


plugins {
    id "org.jetbrains.kotlin.jvm" version '1.1.61'
}

apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'
apply plugin: "kotlin"

//noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    //noinspection GrUnresolvedAccess
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// On travis, we don't want to deploy to Jetbrains that requires credentials
if (project.file('gradle.properties').exists()) {
    apply from: "gradle.properties"
}

// run this task for profiling the running sandbox
task runIdeProfiler(type: org.jetbrains.intellij.tasks.RunIdeTask) {
    jvmArgs = ["-agentpath:/home/patrick/build/share/yjp-2017.02/bin/linux-x86-64/libyjpagent.so=delay=2000"]
}

sourceSets {
    //noinspection GroovyAssignabilityCheck
    main {
        java.srcDirs = ['src']
        resources.srcDirs = ['resources']
    }
    test {
        java.srcDirs = ['tests']
        resources.srcDirs = ['testData']
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile fileTree(dir: 'lib', include: ['*.jar'])
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}

// Information  about the plugin

// Plugin version number
version '3.0pre5'

intellij {
    version = '2017.3'
    downloadSources = true
    pluginName = 'Mathematica-IntelliJ-Plugin'
    updateSinceUntilBuild = false
}

// Simple function to load change-notes.html and description.html into valid text for plugin.xml
def htmlFixer = {htmlFile -> file(htmlFile).text.replace('<html>', '').replace('</html>', '')}

patchPluginXml {
    changeNotes = htmlFixer('resources/META-INF/change-notes.html')
    pluginDescription = htmlFixer('resources/META-INF/description.html')
}
