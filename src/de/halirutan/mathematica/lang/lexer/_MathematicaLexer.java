/*
 * Copyright (c) 2018 Patrick Scheibe
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.halirutan.mathematica.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.halirutan.mathematica.lang.parsing.MathematicaElementTypes;

import java.util.LinkedList;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Mathematica.flex</tt>
 */
class _MathematicaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_STRING = 4;
  public static final int PUT_START = 6;
  public static final int PUT_RHS = 8;
  public static final int GET_START = 10;
  public static final int GET_RHS = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  4, 4
  };

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
        "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
        "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
        "\53\4\14\1\54\12\11\1\55\u0381\11");
  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
        "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1" +
        "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65" +
        "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2" +
        "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115" +
        "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13" +
        "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142" +
        "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13" +
        "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13" +
        "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77" +
        "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157" +
        "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1" +
        "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13" +
        "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6" +
        "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10" +
        "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1" +
        "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13" +
        "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1" +
        "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153" +
        "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13" +
        "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1" +
        "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46" +
        "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1" +
        "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20" +
        "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1" +
        "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1" +
        "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1" +
        "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13" +
        "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1" +
        "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242" +
        "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13" +
        "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2" +
        "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1" +
        "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2" +
        "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1" +
        "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1" +
        "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1" +
        "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1" +
        "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46" +
        "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14" +
        "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115" +
        "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154" +
        "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13" +
        "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1" +
        "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1" +
        "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273" +
        "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277" +
        "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15" +
        "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");
  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\54\1\55\1\2\22\0\1\3\1\44\1\30\1\27\1\7\1\31\1\52\1\53\1\4"+
    "\1\6\1\5\1\45\1\47\1\26\1\24\1\40\1\15\1\23\1\17\1\20\3\21\3\22\1\41\1\43"+
    "\1\34\1\42\1\36\1\51\1\37\32\16\1\12\1\11\1\13\1\25\1\50\1\14\32\16\1\32\1"+
    "\35\1\33\1\46\6\0\1\54\24\0\1\7\12\0\1\7\4\0\1\7\5\0\27\7\1\0\12\7\4\0\14"+
    "\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3"+
    "\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10\0\6\7\1\0\26\7\2\0\1\7\6\0\10\7\10"+
    "\0\13\7\5\0\3\7\15\0\12\10\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\10\3\7\2\0"+
    "\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\10\6\7\4\0\2\7\4\0\1\7\5\0\6\7\4"+
        "\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\1\0\10\7\6\0\26\7\3\0\1\7\2\0\1\7" +
        "\7\0\12\7\4\0\12\10\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7" +
        "\3\0\1\7\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7" +
        "\17\0\4\7\1\0\1\7\7\0\12\10\2\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7\3\0" +
        "\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3" +
        "\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0\3\7" +
        "\5\0\1\7\4\0\10\7\1\0\6\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\6\0\3" +
        "\7\10\0\1\7\12\0\6\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1" +
        "\0\2\7\14\0\12\10\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7" +
        "\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7" +
        "\11\0\12\10\2\0\14\7\1\0\24\7\13\0\5\7\22\0\7\7\4\0\4\7\3\0\1\7\3\0\2\7\7" +
        "\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7" +
        "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7" +
        "\2\0\6\7\2\0\15\7\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\5" +
        "\7\2\0\22\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\5\7\13\0\14\7\13\0\1\7\15\0\7\7" +
        "\7\0\16\7\15\0\2\7\12\10\3\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1" +
        "\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7" +
        "\14\0\2\54\7\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1" +
        "\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\13\0\5" +
        "\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\6\0\2\7\12\0\5\7\5\0\2\7\3\0" +
        "\7\7\6\0\3\7\12\10\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7" +
        "\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\10\5\7\1\0\3\7\1\0\10\7\4\0\7" +
        "\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6" +
        "\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1" +
        "\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14" +
        "\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0" +
        "\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12" +
        "\0\4\7\13\0\12\10\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14" +
        "\0\3\7\7\0\4\7\11\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1" +
        "\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1\0" +
        "\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22\10" +
        "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7" +
        "\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1" +
        "\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1" +
        "\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");
  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\5\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\4\44\2\45\1\46"+
    "\1\47\1\1\1\50\1\51\1\52\1\53\1\54\1\55"+
        "\1\56\1\57\2\0\2\3\1\60\1\61\1\0\2\13" +
        "\1\0\1\62\1\0\1\63\1\64\1\65\1\66\1\67" +
        "\1\0\1\17\2\0\1\70\1\71\1\72\1\73\1\74" +
        "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104" +
        "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114" +
        "\1\115\1\0\1\116\1\117\1\120\1\121\1\122\1\123" +
        "\1\124\1\125\1\126\2\45\3\0\1\7\2\0\1\13" +
        "\2\0\1\127\1\130\2\0\1\131\1\132\1\133\1\134" +
        "\1\135\1\136\1\137\1\140\1\141\1\0\1\142\1\13" +
        "\1\0\2\13\1\0\1\67\1\13\1\0";

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u0114\0\u01fa\0\u0228\0\u0114\0\u0114"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0114\0\u0422\0\u0114\0\u0114\0\u0450\0\u047e"+
    "\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u061c\0\u0114\0\u064a\0\u0114\0\u0678\0\u0114\0\u06a6\0\u019e"+
    "\0\u06d4\0\u0114\0\u0702\0\u0730\0\u0114\0\u0114\0\u075e\0\u078c"+
    "\0\u07ba\0\u0114\0\u0114\0\u07e8\0\u0114\0\u0114\0\u0114\0\u0816"+
    "\0\u0844\0\u0114\0\u0872\0\u08a0\0\u0114\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u0114\0\u0114\0\u0114\0\u0114\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u0ac8\0\u0114\0\u0114\0\u0af6\0\u0114\0\u0114"+
    "\0\u0114\0\u0b24\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114"+
        "\0\u0114\0\u0bdc\0\u0114\0\u0114\0\u0114\0\u0c0a\0\u0c38\0\u08a0" +
        "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0114" +
        "\0\u0114\0\u0da8\0\u0dd6\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114" +
        "\0\u0114\0\u0114\0\u0114\0\u0114\0\u0e04\0\u0114\0\u0e32\0\u0e32" +
        "\0\u0e60\0\u0e8e\0\u0ebc\0\u0114\0\u0eea\0\u0f18";
  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\7"+
    "\1\16\1\17\1\20\1\21\1\22\1\15\1\23\1\24"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\0\1\11\4\57\1\60\1\61\1\62"+
    "\47\57\11\63\1\64\16\63\1\65\25\63\1\66\2\67"+
    "\1\70\50\66\1\0\1\70\1\71\2\67\2\7\1\71"+
    "\1\7\3\71\2\7\11\71\1\7\1\71\1\7\1\72"+
    "\7\7\2\71\2\7\1\71\1\7\1\71\1\7\3\71"+
    "\1\7\1\71\1\0\1\73\2\67\1\74\50\73\1\0"+
    "\1\74\57\0\2\10\56\0\1\11\51\0\1\11\5\0"+
    "\1\75\55\0\1\76\34\0\1\77\22\0\2\15\1\100"+
    "\2\0\1\101\7\15\33\0\1\102\1\103\7\0\1\104"+
    "\52\0\1\15\1\0\1\100\2\0\1\105\1\0\1\15"+
    "\44\0\1\106\6\0\1\107\1\22\1\0\5\22\1\110"+
    "\36\0\1\106\6\0\1\107\1\25\1\0\5\25\1\110"+
    "\1\111\35\0\1\106\6\0\1\107\1\25\1\0\3\25"+
    "\1\22\1\25\1\110\1\111\35\0\1\106\6\0\1\107"+
    "\1\22\1\0\5\22\1\110\1\111\35\0\1\106\6\0"+
    "\1\107\1\25\1\0\5\25\1\110\46\0\1\110\1\0"+
    "\5\110\1\112\72\0\1\113\1\114\41\0\1\115\7\0"+
    "\1\116\3\0\1\117\22\0\1\120\1\0\1\121\3\0"+
    "\1\122\1\120\5\122\3\0\1\122\1\123\56\0\1\34"+
    "\52\0\1\124\5\0\1\125\1\126\1\127\3\0\1\130"+
    "\50\0\1\131\1\132\55\0\1\133\3\0\1\134\20\0"+
    "\1\135\31\0\1\136\23\0\1\137\16\0\1\140\12\0"+
    "\1\141\1\142\1\143\1\144\1\145\50\0\1\146\2\0"+
    "\1\147\1\150\37\0\1\151\15\0\1\152\1\0\1\153"+
    "\54\0\1\154\54\0\1\155\55\0\1\156\2\0\1\157"+
    "\56\0\1\160\33\0\1\161\23\0\1\162\57\0\1\163"+
    "\3\0\4\57\3\0\47\57\6\0\1\164\47\0\11\63"+
    "\1\0\16\63\1\0\25\63\1\0\1\165\1\166\6\0"+
    "\1\165\1\167\15\0\1\165\26\0\2\67\56\0\1\70"+
    "\51\0\1\70\1\71\4\0\1\71\1\0\3\71\2\0"+
    "\11\71\1\0\1\71\11\0\2\71\2\0\1\71\1\0"+
    "\1\71\1\0\3\71\1\0\1\71\4\0\1\74\51\0"+
        "\1\74\12\0\1\170\52\0\1\15\1\0\1\100\4\0" +
        "\1\15\40\0\1\102\63\0\1\171\3\0\1\172\2\0" +
        "\1\171\64\0\1\173\35\0\1\106\6\0\1\174\1\175" +
        "\1\0\5\175\1\176\36\0\1\106\6\0\1\107\1\110" +
        "\1\0\5\110\57\0\1\177\54\0\1\200\73\0\1\201" +
        "\22\0\2\120\4\0\7\120\44\0\1\202\60\0\1\122" +
        "\1\0\5\122\41\0\1\203\6\0\1\203\75\0\1\204" +
        "\55\0\1\205\56\0\1\206\42\0\1\207\12\0\1\210" +
        "\33\0\1\211\1\0\5\211\74\0\1\212\55\0\1\213" +
        "\63\0\1\214\6\0\1\165\63\0\1\215\3\0\1\216" +
        "\2\0\1\215\46\0\2\171\2\0\1\172\1\0\7\171" +
    "\41\0\1\15\1\0\1\100\2\0\1\101\1\0\1\15"+
        "\54\0\1\217\1\0\5\217\2\0\1\220\44\0\1\175" +
        "\1\0\5\175\1\176\36\0\1\106\7\0\1\175\1\0" +
        "\5\175\1\221\46\0\1\221\1\0\5\221\47\0\7\222" +
        "\41\0\1\223\6\0\1\223\46\0\2\203\4\0\7\203" +
        "\4\0\1\224\34\0\2\215\2\0\1\216\1\0\7\215" +
        "\47\0\1\217\1\0\5\217\37\0\1\106\7\0\1\221" +
        "\1\0\5\221\46\0\1\107\7\222\1\225\40\0\2\223" +
        "\1\226\3\0\7\223\46\0\1\107\7\225\45\0\1\224" +
    "\42\0";

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\6\0\1\11\4\1\1\11\2\1\2\11\12\1\1\11" +
          "\1\1\2\11\13\1\1\11\1\1\1\11\1\1\1\11" +
          "\3\1\1\11\2\1\2\11\3\1\2\11\1\1\3\11" +
          "\2\0\1\11\2\1\1\11\1\0\2\1\1\0\1\1" +
          "\1\0\4\11\1\1\1\0\1\1\2\0\6\11\1\1" +
          "\2\11\1\1\3\11\1\1\6\11\2\1\1\0\6\11" +
          "\1\1\3\11\1\1\3\0\1\1\2\0\1\1\2\0" +
          "\2\11\2\0\11\11\1\0\1\11\1\1\1\0\2\1" +
          "\1\0\1\11\1\1\1\0";

  /**
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static int[] zzUnpackAction() {
    int[] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int [] zzUnpackTrans() {
    int [] result = new int[3910];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static int[] zzUnpackRowMap() {
    int[] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int [] zzUnpackAttribute() {
    int[] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    private final LinkedList<Integer> states = new LinkedList<Integer>();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }

    private void yyclearstack() {
      states.clear();
    }

    private Integer yypeakstate() {
        if(states.size() > 0) return states.getFirst();
        return -1;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _MathematicaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_COMMENT: {
              yyclearstack(); yybegin(YYINITIAL); return MathematicaElementTypes.COMMENT;
            }  // fall though
          case 151:
            break;
          default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return MathematicaElementTypes.BAD_CHARACTER;
            }
          // fall through
          case 99:
            break;
          case 2: 
            { return MathematicaElementTypes.LINE_BREAK;
            }
          // fall through
          case 100:
            break;
          case 3: 
            { return MathematicaElementTypes.WHITE_SPACE;
            }
          // fall through
          case 101:
            break;
          case 4: 
            { return MathematicaElementTypes.LEFT_PAR;
            }
          // fall through
          case 102:
            break;
          case 5: 
            { return MathematicaElementTypes.TIMES;
            }
          // fall through
          case 103:
            break;
          case 6: 
            { return MathematicaElementTypes.RIGHT_PAR;
            }
          // fall through
          case 104:
            break;
          case 7: 
            { return MathematicaElementTypes.IDENTIFIER;
            }
          // fall through
          case 105:
            break;
          case 8: 
            { return MathematicaElementTypes.LEFT_BRACKET;
            }
          // fall through
          case 106:
            break;
          case 9: 
            { return MathematicaElementTypes.RIGHT_BRACKET;
            }
          // fall through
          case 107:
            break;
          case 10: 
            { return MathematicaElementTypes.BACK_TICK;
            }
          // fall through
          case 108:
            break;
          case 11: 
            { return MathematicaElementTypes.NUMBER;
            }
          // fall through
          case 109:
            break;
          case 12: 
            { return MathematicaElementTypes.POINT;
            }
          // fall through
          case 110:
            break;
          case 13: 
            { return MathematicaElementTypes.POWER;
            }
          // fall through
          case 111:
            break;
          case 14: 
            { return MathematicaElementTypes.MINUS;
            }
          // fall through
          case 112:
            break;
          case 15: 
            { return MathematicaElementTypes.SLOT;
            }
          // fall through
          case 113:
            break;
          case 16: 
            { yypushstate(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
            }
          // fall through
          case 114:
            break;
          case 17: 
            { return MathematicaElementTypes.OUT;
            }
          // fall through
          case 115:
            break;
          case 18: 
            { return MathematicaElementTypes.LEFT_BRACE;
            }
          // fall through
          case 116:
            break;
          case 19: 
            { return MathematicaElementTypes.RIGHT_BRACE;
            }
          // fall through
          case 117:
            break;
          case 20: 
            { return MathematicaElementTypes.LESS;
            }
          // fall through
          case 118:
            break;
          case 21: 
            { return MathematicaElementTypes.ALTERNATIVE;
            }
          // fall through
          case 119:
            break;
          case 22: 
            { return MathematicaElementTypes.GREATER;
            }
          // fall through
          case 120:
            break;
          case 23: 
            { return MathematicaElementTypes.PREFIX_CALL;
            }
          // fall through
          case 121:
            break;
          case 24: 
            { return MathematicaElementTypes.DIVIDE;
            }
          // fall through
          case 122:
            break;
          case 25: 
            { return MathematicaElementTypes.COLON;
            }
          // fall through
          case 123:
            break;
          case 26: 
            { return MathematicaElementTypes.SET;
            }
          // fall through
          case 124:
            break;
          case 27: 
            { return MathematicaElementTypes.SEMICOLON;
            }
          // fall through
          case 125:
            break;
          case 28: 
            { return MathematicaElementTypes.EXCLAMATION_MARK;
            }
          // fall through
          case 126:
            break;
          case 29: 
            { return MathematicaElementTypes.PLUS;
            }
          // fall through
          case 127:
            break;
          case 30: 
            { return MathematicaElementTypes.INFIX_CALL;
            }
          // fall through
          case 128:
            break;
          case 31: 
            { return MathematicaElementTypes.COMMA;
            }
          // fall through
          case 129:
            break;
          case 32: 
            { return MathematicaElementTypes.BLANK;
            }
          // fall through
          case 130:
            break;
          case 33: 
            { return MathematicaElementTypes.QUESTION_MARK;
            }
          // fall through
          case 131:
            break;
          case 34: 
            { return MathematicaElementTypes.FUNCTION;
            }
          // fall through
          case 132:
            break;
          case 35: 
            { return MathematicaElementTypes.DERIVATIVE;
            }
          // fall through
          case 133:
            break;
          case 36: 
            {
            }
          // fall through
          case 134:
            break;
          case 37: 
            { return MathematicaElementTypes.STRING_LITERAL;
            }
          // fall through
          case 135:
            break;
          case 38: 
            { yypopstate(); return MathematicaElementTypes.STRING_LITERAL_END;
            }
          // fall through
          case 136:
            break;
          case 39: 
            { yypushback(1); yybegin(PUT_RHS);
            }
          // fall through
          case 137:
            break;
          case 40: 
            { yybegin(PUT_RHS); return MathematicaElementTypes.WHITE_SPACE;
            }
          // fall through
          case 138:
            break;
          case 41: 
            { yybegin(YYINITIAL); return MathematicaElementTypes.STRINGIFIED_IDENTIFIER;
            }
          // fall through
          case 139:
            break;
          case 42: 
            { yybegin(YYINITIAL); yypushstate(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
            }
          // fall through
          case 140:
            break;
          case 43: 
            { yypushback(1); yybegin(GET_RHS);
            }
          // fall through
          case 141:
            break;
          case 44: 
            { yybegin(GET_RHS); return MathematicaElementTypes.WHITE_SPACE;
            }
          // fall through
          case 142:
            break;
          case 45: 
            { yypushstate(IN_COMMENT);
            }
          // fall through
          case 143:
            break;
          case 46: 
            { return MathematicaElementTypes.NON_COMMUTATIVE_MULTIPLY;
            }
          // fall through
          case 144:
            break;
          case 47: 
            { return MathematicaElementTypes.TIMES_BY;
            }
          // fall through
          case 145:
            break;
          case 48: {
            return MathematicaElementTypes.LEFT_BRACKET_ESCAPED;
          }
          // fall through
          case 146:
            break;
          case 49: {
            return MathematicaElementTypes.ACCURACY;
          }
          // fall through
          case 147:
            break;
          case 50: {
            return MathematicaElementTypes.REPEATED;
          }
          // fall through
          case 148: break;
          case 51: {
            return MathematicaElementTypes.UP_SET;
          }
          // fall through
          case 149: break;
          case 52: {
            return MathematicaElementTypes.DECREMENT;
          }
          // fall through
          case 150: break;
          case 53: {
            return MathematicaElementTypes.RULE;
          }
          // fall through
          case 151: break;
          case 54: {
            return MathematicaElementTypes.SUBTRACT_FROM;
          }
          // fall through
          case 152: break;
          case 55: {
            return MathematicaElementTypes.ASSOCIATION_SLOT;
          }
          // fall through
          case 153:
            break;
          case 56: {
            yybegin(GET_START);
            return MathematicaElementTypes.GET;
          }
          // fall through
          case 154:
            break;
          case 57: { return MathematicaElementTypes.LEFT_ASSOCIATION;
          }
          // fall through
          case 155:
            break;
          case 58: {
            return MathematicaElementTypes.STRING_JOIN;
          }
          // fall through
          case 156:
            break;
          case 59: {
            return MathematicaElementTypes.LESS_EQUAL;
          }
          // fall through
          case 157:
            break;
          case 60: { return MathematicaElementTypes.OR;
          }
          // fall through
          case 158:
            break;
          case 61: { return MathematicaElementTypes.RIGHT_ASSOCIATION;
          }
          // fall through
          case 159:
            break;
          case 62: { yybegin(PUT_START); return MathematicaElementTypes.PUT;
          }
          // fall through
          case 160:
            break;
          case 63: { return MathematicaElementTypes.GREATER_EQUAL;
          }
          // fall through
          case 161: break;
          case 64: {
            return MathematicaElementTypes.COMPOSITION;
          }
          // fall through
          case 162:
            break;
          case 65: {
            return MathematicaElementTypes.APPLY;
          }
          // fall through
          case 163:
            break;
          case 66: { return MathematicaElementTypes.RIGHT_COMPOSITION;
          }
          // fall through
          case 164:
            break;
          case 67: {
            return MathematicaElementTypes.REPLACE_ALL;
          }
          // fall through
          case 165: break;
          case 68: {
            return MathematicaElementTypes.MAP;
          }
          // fall through
          case 166: break;
          case 69: {
            return MathematicaElementTypes.POSTFIX;
          }
          // fall through
          case 167:
            break;
          case 70: {
            return MathematicaElementTypes.TAG_SET;
          }
          // fall through
          case 168:
            break;
          case 71: { return MathematicaElementTypes.DIVIDE_BY;
          }
          // fall through
          case 169:
            break;
          case 72: { return MathematicaElementTypes.CONDITION;
          }
          // fall through
          case 170:
            break;
          case 73: { return MathematicaElementTypes.RULE_DELAYED;
          }
          // fall through
          case 171: break;
          case 74: {
            return MathematicaElementTypes.DOUBLE_COLON;
          }
          // fall through
          case 172: break;
          case 75: {
            return MathematicaElementTypes.SET_DELAYED;
          }
          // fall through
          case 173: break;
          case 76: {
            return MathematicaElementTypes.UNSET;
          }
          // fall through
          case 174: break;
          case 77: {
            return MathematicaElementTypes.EQUAL;
          }
          // fall through
          case 175: break;
          case 78: {
            return MathematicaElementTypes.SPAN;
          }
          // fall through
          case 176:
            break;
          case 79: {
            return MathematicaElementTypes.UNEQUAL;
          }
          // fall through
          case 177:
            break;
          case 80: { return MathematicaElementTypes.ADD_TO;
          }
          // fall through
          case 178:
            break;
          case 81: { return MathematicaElementTypes.INCREMENT;
          }
          // fall through
          case 179:
            break;
          case 82: {
            return MathematicaElementTypes.STRING_EXPRESSION;
          }
          // fall through
          case 180:
            break;
          case 83: { return MathematicaElementTypes.DEFAULT;
          }
          // fall through
          case 181:
            break;
          case 84: { return MathematicaElementTypes.BLANK_SEQUENCE;
          }
          // fall through
          case 182:
            break;
          case 85: { return MathematicaElementTypes.AND;
          }
          // fall through
          case 183:
            break;
          case 86: { yypopstate();
	                                if(yystate() != IN_COMMENT) return MathematicaElementTypes.COMMENT;
          }
          // fall through
          case 184:
            break;
          case 87: {
            return MathematicaElementTypes.REPEATED_NULL;
          }
          // fall through
          case 185:
            break;
          case 88: {
            return MathematicaElementTypes.UP_SET_DELAYED;
          }
          // fall through
          case 186:
            break;
          case 89: { return MathematicaElementTypes.UNDIRECTED_EDGE;
          }
          // fall through
          case 187:
            break;
          case 90: {
            yybegin(PUT_START);
            return MathematicaElementTypes.PUT_APPEND;
          }
          // fall through
          case 188: break;
          case 91: {
            return MathematicaElementTypes.APPLY1;
          }
          // fall through
          case 189: break;
          case 92: {
            return MathematicaElementTypes.REPLACE_REPEATED;
          }
          // fall through
          case 190: break;
          case 93: {
            return MathematicaElementTypes.MAP_ALL;
          }
          // fall through
          case 191:
            break;
          case 94: {
            yypushback(2);
            return MathematicaElementTypes.SET;
          }
          // fall through
          case 192:
            break;
          case 95: { return MathematicaElementTypes.SAME_Q;
          }
          // fall through
          case 193:
            break;
          case 96: { return MathematicaElementTypes.UNSAME_Q;
          }
          // fall through
          case 194:
            break;
          case 97: { return MathematicaElementTypes.BLANK_NULL_SEQUENCE;
          }
          // fall through
          case 195:
            break;
          case 98: { return MathematicaElementTypes.STRING_NAMED_CHARACTER;
          }
          // fall through
          case 196:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
